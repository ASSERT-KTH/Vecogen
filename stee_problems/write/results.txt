[{'iteration': 0, 'prompt': 'You are an expert software engineer that is asked to implement a function for formally specified problems in the safety-critical domain. You are given a specification in the ACSL language and are asked to create the code in C will be formally verified using the tool Frama-C.\n-----END_ASSISTANT_INFORMATION-----\nYou must adhere to the following rules:\nUse the predicates defined in the specification\nDo not change the specification\nDo not add an explanation to the code\nDo not make use of loops\n\nYou are given the following specification and problem description. You must return the code in the following format:\n```C\n/*\n    This module controls the steering system of vehicles.\n\n    The following is a list of requirements it should adhere to.\n\n    Req. 1:\n    If the primary circuit has no flow\n    or a short circuit is detected\n    then the primary circuit cannot provide power steering.\n\n    Req. 2:\n    The vehicle is considered to be moving\n    if the wheel based speed signal is greater than 3 km/h.\n\n    Req. 3:\n    If the vehicle is moving\n    and the primary circuit cannot provide power steering\n    then the vehicle is moving without primary power steering.\n\n    Req. 4:\n    If the vehicle is moving without primary power steering\n    then the secondary circuit should handle power steering.\n\n    Req. 5:\n    If the secondary circuit is providing power steering\n    and the parking brake is not set\n    then the electric motor must be activated.\n */\n\nenum SIGNAL\n{\n    PARKING_BRAKE_APPLIED,\n    PRIMARY_CIRCUIT_LOW_FLOW,\n    PRIMARY_CIRCUIT_HIGH_VOLTAGE,\n    WHEEL_BASED_SPEED,\n    SECONDARY_CIRCUIT_HANDLES_STEERING,\n    ELECTRIC_MOTOR_ACTIVATED,\n    NUM_SIGNALS\n};\n\n// ghost variables representing model_variables in requirements\n// note: these should all be booleans\n//@ ghost int model_vehicleIsMoving;\n//@ ghost int model_vehicleMovingWithoutPrimaryPowerSteering;\n//@ ghost int model_primaryCircuitProvidingPowerSteering;\n\nint state_PARKING_BRAKE_APPLIED;\nint state_PRIMARY_CIRCUIT_LOW_FLOW;\nint state_PRIMARY_CIRCUIT_HIGH_VOLTAGE;\nint state_WHEEL_BASED_SPEED;\nint state_SECONDARY_CIRCUIT_HANDLES_STEERING;\nint state_ELECTRIC_MOTOR_ACTIVATED;\n\n// int state[NUM_SIGNALS]; // Global state\n\n/*\n    Writes the specified signal to the state.\n */\n/*@\n  requires (model_vehicleIsMoving == 0 && model_primaryCircuitProvidingPowerSteering == 0 && idx == 5 && 1 >= model_vehicleMovingWithoutPrimaryPowerSteering && model_vehicleMovingWithoutPrimaryPowerSteering >= 0) || (model_vehicleIsMoving == 0 && model_primaryCircuitProvidingPowerSteering == 0 && idx == 4 && 1 >= model_vehicleMovingWithoutPrimaryPowerSteering && model_vehicleMovingWithoutPrimaryPowerSteering >= 0) || (model_vehicleMovingWithoutPrimaryPowerSteering == 1 && model_primaryCircuitProvidingPowerSteering == 0 && idx == 5 && 1 >= model_vehicleIsMoving && model_vehicleIsMoving >= 0) || (model_vehicleMovingWithoutPrimaryPowerSteering == 1 && model_primaryCircuitProvidingPowerSteering == 0 && idx == 4 && 1 >= model_vehicleIsMoving && model_vehicleIsMoving >= 0) || (model_primaryCircuitProvidingPowerSteering == 1 && idx == 5 && 1 >= model_vehicleIsMoving && model_vehicleIsMoving >= 0 && 1 >= model_vehicleMovingWithoutPrimaryPowerSteering && model_vehicleMovingWithoutPrimaryPowerSteering >= 0) || (model_primaryCircuitProvidingPowerSteering == 1 && idx == 4 && 1 >= model_vehicleIsMoving && model_vehicleIsMoving >= 0 && 1 >= model_vehicleMovingWithoutPrimaryPowerSteering && model_vehicleMovingWithoutPrimaryPowerSteering >= 0);\n  ensures model_primaryCircuitProvidingPowerSteering == \\old(model_primaryCircuitProvidingPowerSteering) && model_vehicleMovingWithoutPrimaryPowerSteering == \\old(model_vehicleMovingWithoutPrimaryPowerSteering) && model_vehicleIsMoving == \\old(model_vehicleIsMoving) && (\\old(idx) != 5 || ((state_SECONDARY_CIRCUIT_HANDLES_STEERING != \\old(state_SECONDARY_CIRCUIT_HANDLES_STEERING) || ((state_ELECTRIC_MOTOR_ACTIVATED != \\old(val) || ((\\old(model_primaryCircuitProvidingPowerSteering) != 1 || (1 >= \\old(model_vehicleMovingWithoutPrimaryPowerSteering) && \\old(model_vehicleMovingWithoutPrimaryPowerSteering) >= 0 && 1 >= \\old(model_vehicleIsMoving) && \\old(model_vehicleIsMoving) >= 0)) && (\\old(model_primaryCircuitProvidingPowerSteering) == 1 || \\old(model_primaryCircuitProvidingPowerSteering) == 0))) && (state_ELECTRIC_MOTOR_ACTIVATED == \\old(val) || \\old(model_primaryCircuitProvidingPowerSteering) == 0))) && (state_SECONDARY_CIRCUIT_HANDLES_STEERING == \\old(state_SECONDARY_CIRCUIT_HANDLES_STEERING) || \\old(model_primaryCircuitProvidingPowerSteering) == 0))) && (\\old(idx) != 4 || ((state_SECONDARY_CIRCUIT_HANDLES_STEERING != \\old(val) || ((\\old(model_primaryCircuitProvidingPowerSteering) != 1 || (1 >= \\old(model_vehicleMovingWithoutPrimaryPowerSteering) && \\old(model_vehicleMovingWithoutPrimaryPowerSteering) >= 0 && 1 >= \\old(model_vehicleIsMoving) && \\old(model_vehicleIsMoving) >= 0)) && (\\old(model_primaryCircuitProvidingPowerSteering) == 1 || \\old(model_primaryCircuitProvidingPowerSteering) == 0))) && (state_SECONDARY_CIRCUIT_HANDLES_STEERING == \\old(val) || \\old(model_primaryCircuitProvidingPowerSteering) == 0))) && (\\old(model_primaryCircuitProvidingPowerSteering) != 0 || ((\\old(model_vehicleIsMoving) != 0 || ((\\old(idx) != 5 || (state_ELECTRIC_MOTOR_ACTIVATED == \\old(val) && state_SECONDARY_CIRCUIT_HANDLES_STEERING == \\old(state_SECONDARY_CIRCUIT_HANDLES_STEERING) && (\\old(model_vehicleMovingWithoutPrimaryPowerSteering) == 1 || \\old(model_vehicleMovingWithoutPrimaryPowerSteering) == 0))) && (\\old(idx) != 4 || (state_SECONDARY_CIRCUIT_HANDLES_STEERING == \\old(val) && (\\old(model_vehicleMovingWithoutPrimaryPowerSteering) == 1 || \\old(model_vehicleMovingWithoutPrimaryPowerSteering) == 0))) && (\\old(idx) == 5 || \\old(idx) == 4))) && (\\old(idx) == 5 || \\old(idx) == 4 || \\old(model_vehicleIsMoving) == 0) && (\\old(model_vehicleIsMoving) == 0 || ((\\old(idx) != 5 || (state_ELECTRIC_MOTOR_ACTIVATED == \\old(val) && state_SECONDARY_CIRCUIT_HANDLES_STEERING == \\old(state_SECONDARY_CIRCUIT_HANDLES_STEERING) && \\old(model_vehicleMovingWithoutPrimaryPowerSteering) == 1 && \\old(model_vehicleIsMoving) == 1)) && (\\old(idx) != 4 || (state_SECONDARY_CIRCUIT_HANDLES_STEERING == \\old(val) && \\old(model_vehicleMovingWithoutPrimaryPowerSteering) == 1 && \\old(model_vehicleIsMoving) == 1)))))) && (\\old(idx) == 5 || \\old(idx) == 4 || \\old(model_primaryCircuitProvidingPowerSteering) == 0);\n*/\nvoid write(enum SIGNAL idx, int val);\n  // TODO: ADD CODE HERE\n\n```', 'gpt_output': '```C\nvoid write(enum SIGNAL idx, int val) {\n    switch (idx) {\n        case SECONDARY_CIRCUIT_HANDLES_STEERING:\n            state_SECONDARY_CIRCUIT_HANDLES_STEERING = val;\n            if (val && !state_PARKING_BRAKE_APPLIED) {\n                state_ELECTRIC_MOTOR_ACTIVATED = 1;\n            }\n            break;\n        case ELECTRIC_MOTOR_ACTIVATED:\n            state_ELECTRIC_MOTOR_ACTIVATED = val;\n            break;\n        default:\n            break;\n    }\n}\n```', 'verified': True, 'verified_goals': '5 / 5', 'temperature': 0, 'info': 'initial prompt'}]